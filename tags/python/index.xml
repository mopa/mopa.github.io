<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>python - Etiqueta - Pablo M.</title>
        <link>/tags/python/</link>
        <description>python - Etiqueta - Pablo M.</description>
        <generator>Hugo -- gohugo.io</generator><language>es</language><copyright>Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 07 Jun 2022 00:00:00 &#43;0000</lastBuildDate><atom:link href="/tags/python/" rel="self" type="application/rss+xml" /><item>
    <title>[PySpark] CheatSheet o Chuleta</title>
    <link>/2022/06/pyspark-cheatsheet-o-chuleta/</link>
    <pubDate>Tue, 07 Jun 2022 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>/2022/06/pyspark-cheatsheet-o-chuleta/</guid>
    <description><![CDATA[Como bien indica el título de este post es para dejar por aquí una chuleta para PySpark.
Principales comandos Acción Comando Importar SparkSession from pyspark.sql import SparkSession Crear SparkSession spark = SparkSession.builder.appName(&quot;MiAplicacion&quot;).getOrCreate() Crear RDD a partir de una lista rdd = spark.sparkContext.parallelize([1, 2, 3, 4, 5]) Crear DataFrame a partir de un archivo CSV df = spark.read.csv(&quot;archivo.csv&quot;, header=True, inferSchema=True) Ver los primeros n elementos de un RDD o DataFrame rdd.take(5) / df.]]></description>
</item><item>
    <title>[Python] Crear entornos virtuales en Python 3</title>
    <link>/2021/04/python-crear-entornos-virtuales-en-python-3/</link>
    <pubDate>Sat, 10 Apr 2021 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>/2021/04/python-crear-entornos-virtuales-en-python-3/</guid>
    <description><![CDATA[Una de las formas más seguras y eficientes de desarrollar proyectos en Python es usando entornos virtuales. Podemos hacer todo tipo de perrerías y si no va bien simplemente borramos una carpeta y volvemos a empezar.
Aunque existen varios métodos para tener entornos virtuales, aquí solo vamos a hacerlo de la forma más sencilla posible.
Sabiendo que estamos usando Python 3 (verifica la versión por defecto conpython --version y si no es la 3, has de usar python3 --version) y estamos en la carpeta de nuestro proyecto, ejecutamos]]></description>
</item><item>
    <title>[Python] Regresión Lineal</title>
    <link>/2021/02/python-regresi%C3%B3n-lineal/</link>
    <pubDate>Mon, 08 Feb 2021 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>/2021/02/python-regresi%C3%B3n-lineal/</guid>
    <description><![CDATA[Sigo en mi ruta por ir pasando tareas que hacía en Matlab, y una de las habituales que podemos encontrarnos es una regresión lineal o una no lineal. Mejor no entro en el debate del porqué no se usa Python + Numpy + otras librerías en el ámbito académico, de modo que me limito a describir como poder hacer estas regresiones con Numpy.
Supongamos que tenemos los datos en dos arrays (ya sea cargando los datos de un csv, un archivo de texto o cualquier otra forma), lo único que tenemos que hacer es especificar el grado del polinomio con el que queremos hacer el ajuste.]]></description>
</item><item>
    <title>[Python] Resolver ecuaciones y sistemas de ecuaciones</title>
    <link>/2020/11/python-resolver-ecuaciones-y-sistemas-de-ecuaciones/</link>
    <pubDate>Mon, 09 Nov 2020 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>/2020/11/python-resolver-ecuaciones-y-sistemas-de-ecuaciones/</guid>
    <description><![CDATA[En ingeniería (y en el ámbito científico en general) es de sobra conocido Matlab para resolver ecuaciones, hacer modelado, simulaciones, etc. Pero ya sea por el precio, forma de trabajar, filosofía de software o cualquier otra razón no queramos usarlo y busquemos un reemplazo. Podemos optar por usar GNU Octave, pero yo me inclino por Python + Jupyter. Así pues, vamos a ver como podemos resolver ecuaciones, ecuaciones cuadráticas, sistemas de ecuaciones lineales y una pequeña introducción al cálculo simbólico.]]></description>
</item><item>
    <title>[Python/Pandas] Truquitos para ser más ágiles</title>
    <link>/2019/05/python-pandas-truquitos-para-ser-mas-agiles/</link>
    <pubDate>Fri, 03 May 2019 00:00:00 &#43;0000</pubDate>
    <author>Autor</author>
    <guid>/2019/05/python-pandas-truquitos-para-ser-mas-agiles/</guid>
    <description><![CDATA[Una de las operaciones más habituales es importar ficheros. Pero cuando tratamos con alguno que es bien gordo, esta simple operación se vuelve una tortura, así que es mejor importar solo algunos datos.
read_csv Comando archiconocido, y uno de sus argumentos es nrows. Si añadimos, por ejemplo, nrows=5 como argumento de ese gran fichero, estaremos importando una pequeña porción.
Si usamos GNU/Linux tenemos el comando head para ver las primeras líneas del documento, e.]]></description>
</item></channel>
</rss>
